/mercurius/accounts
/mercurius/products
/mercurius/eligibility


Pending

I mean implmenting in every serice resillience 4j
FallBack in Feign client in all services
adding 4j resillency dependencies and in .yml add properties regarding cirecuit breaker


//redis container must start and add dependency and try rate limiter
//	@Bean
//	public RedisRateLimiter redisRateLimiter() {
//		return new RedisRateLimiter(1, 2);
//	}
//
//	@Bean
//	KeyResolver userKeyResolver() {
//		return exchange -> exchange.getPrincipal().map(principal -> principal.getName());
//	}

package com.Mercurius.ApiGateway;

import java.time.Duration;
import java.time.LocalDateTime;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.gateway.filter.ratelimit.KeyResolver;
import org.springframework.cloud.gateway.filter.ratelimit.RedisRateLimiter;
import org.springframework.cloud.gateway.route.RouteLocator;
import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpMethod;

@SpringBootApplication
@EnableDiscoveryClient

public class ApiGatewayApplication {

	public static void main(String[] args) {
		SpringApplication.run(ApiGatewayApplication.class, args);
	}

	@Bean
	public RouteLocator eazyBankRouteConfig(RouteLocatorBuilder routeLocatorBuilder) {
		return routeLocatorBuilder.routes()
				.route(p -> p.path("/mercurius/accounts/**")
						.filters(f -> f.rewritePath("/mercurius/accounts/(?<segment>.*)", "/${segment}")
								.addResponseHeader("X-Response-Time", LocalDateTime.now().toString())
								.addResponseHeader("Responsible", "NetFreaker")
								.circuitBreaker(config -> config.setName("accountsCircuitBreaker")
										.setFallbackUri("forward:/Support")))
						.uri("lb://ACCOUNT-SERVICE"))
				.route(p -> p.path("/mercurius/products/**")
						.filters(f -> f.rewritePath("/mercurius/products/(?<segment>.*)", "/${segment}")
								.addResponseHeader("X-Response-Time", LocalDateTime.now().toString())
								.addResponseHeader("Responsible", "Hanuma")								
								.retry(retryConfig -> retryConfig.setRetries(3).setMethods(HttpMethod.GET)
										.setBackoff(Duration.ofMillis(100), Duration.ofMillis(1000), 2, true)))
						.uri("lb://PRODUCT-SERVICE"))
				.route(p -> p.path("/mercurius/eligibility/**")
						.filters(f -> f.rewritePath("/mercurius/eligibility/(?<segment>.*)", "/${segment}")
								.addResponseHeader("X-Response-Time", LocalDateTime.now().toString())
								.addResponseHeader("Responsible", "Hanuma Ramavath")
								.circuitBreaker(config -> config.setName("eligibilityCircuitBreaker")
										.setFallbackUri("forward:/Support"))
								)
						.uri("lb://ELIGIBILITY-SERVICE"))
				.build();
	}
//redis container must start and add dependency and try rate limiter
//	@Bean
//	public RedisRateLimiter redisRateLimiter() {
//		return new RedisRateLimiter(1, 2);
//	}
//
//	@Bean
//	KeyResolver userKeyResolver() {
//		return exchange -> exchange.getPrincipal().map(principal -> principal.getName());
//	}
}
